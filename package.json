{
  "_args": [
    [
      {
        "raw": "react-native-system-notification@git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
        "scope": null,
        "escapedName": "react-native-system-notification",
        "name": "react-native-system-notification",
        "rawSpec": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
        "spec": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:InnerPeace080/react-native-system-notification.git#RN-0.37",
          "sshUrl": "git+ssh://git@github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
          "httpsUrl": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
          "gitUrl": "git://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
          "shortcut": "github:InnerPeace080/react-native-system-notification#RN-0.37",
          "directUrl": "https://raw.githubusercontent.com/InnerPeace080/react-native-system-notification/RN-0.37/package.json"
        }
      },
      "C:\\Users\\ADMIN\\mobiles"
    ]
  ],
  "_from": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
  "_id": "react-native-system-notification@0.2.1",
  "_inCache": true,
  "_location": "/react-native-system-notification",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-system-notification@git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
    "scope": null,
    "escapedName": "react-native-system-notification",
    "name": "react-native-system-notification",
    "rawSpec": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
    "spec": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:InnerPeace080/react-native-system-notification.git#RN-0.37",
      "sshUrl": "git+ssh://git@github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
      "httpsUrl": "git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
      "gitUrl": "git://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
      "shortcut": "github:InnerPeace080/react-native-system-notification#RN-0.37",
      "directUrl": "https://raw.githubusercontent.com/InnerPeace080/react-native-system-notification/RN-0.37/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/InnerPeace080/react-native-system-notification.git#6bc902ae70a499553d77039070ec26748da5f3fa",
  "_shasum": "e62eba781976da823812335964943b8decb62bfb",
  "_shrinkwrap": null,
  "_spec": "react-native-system-notification@git+https://github.com/InnerPeace080/react-native-system-notification.git#RN-0.37",
  "_where": "C:\\Users\\ADMIN\\mobiles",
  "author": {
    "name": "Neson",
    "email": "neson@dex.tw"
  },
  "bugs": {
    "url": "https://github.com/Neson/react-native-system-notification/issues"
  },
  "dependencies": {},
  "description": "Notification for React Native",
  "devDependencies": {},
  "gitHead": "6bc902ae70a499553d77039070ec26748da5f3fa",
  "homepage": "https://github.com/Neson/react-native-system-notification",
  "keywords": [
    "react-native",
    "android",
    "notification"
  ],
  "license": "MIT",
  "name": "react-native-system-notification",
  "nativePackage": true,
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.29.0"
  },
  "readme": "# react-native-system-notification [![npm version](https://img.shields.io/npm/v/react-native-system-notification.svg?style=flat-square)](https://www.npmjs.com/package/react-native-system-notification)\r\n\r\nSend or schedule Android system notifications for React Native.\r\n\r\n<img width=\"35%\" align=\"right\" hspace=\"1\" vspace=\"1\" src=\"http://i.imgur.com/cY2Z9GH.png\"></img>\r\n\r\n## Table of Contents\r\n\r\n  * [Installation](#installation)\r\n  * [Usage](#usage)\r\n    * [Creating Notifications](#creating-notifications)\r\n      * [Basic](#basic)\r\n      * [Scheduling](#scheduling)\r\n      * [Customization](#customization)\r\n    * [Handle Notification Click Event](#handle-notification-click-event)\r\n    * [Manage Scheduled Notifications](#manage-scheduled-notifications)\r\n    * [Clearing Notifications](#clearing-notifications)\r\n  * [Push Notifications On Android](#push-notifications-on-android)\r\n\r\n---\r\n\r\n```js\r\nimport React, { DeviceEventEmitter } from 'react-native';\r\nimport Notification from 'react-native-system-notification';\r\n\r\n// Send a simple notification\r\nNotification.create({ subject: 'Hey', message: 'Yo! Hello world.' });\r\n\r\n// Listen to notification-clicking events\r\nNotification.addListener('press', function(e) {\r\n  console.log(e);\r\n});\r\n\r\n// Custom payload for notifications\r\nNotification.create({\r\n  subject: 'Notification With Payload',\r\n  message: 'This is a notification that contains custom payload.',\r\n  payload: { number: 1, what: true, someAnswer: '42' }\r\n});\r\n\r\n// Receive the payload on notification events\r\nNotification.addListener('press', function(e) {\r\n  console.log(e.payload);  // => { number: 1, what: true, someAnswer: '42' }\r\n});\r\n\r\n// Customize notification\r\nNotification.create({\r\n  subject: 'Notification With Custom Icon',\r\n  message: 'This is a notification with a specified icon.',\r\n  smallIcon: 'ic_alert'\r\n});\r\n\r\n// Scheduled notifications\r\nNotification.create({\r\n  subject: 'Scheduled Notification',\r\n  message: 'This notification will show on every Friday morning at 8:30 AM, starts at 2015/9/9 and end after 10 times.',\r\n  sendAt: new Date(2015, 9, 9, 8, 30),\r\n  repeatEvery: 'week',\r\n  count: 10\r\n});\r\n```\r\n\r\n## Installation\r\n\r\n- Run `npm install react-native-system-notification --save` to install using npm.\r\n\r\n- Add the following two lines to `android/settings.gradle`:\r\n\r\n```gradle\r\ninclude ':react-native-system-notification'\r\nproject(':react-native-system-notification').projectDir = new File(settingsDir, '../node_modules/react-native-system-notification/android')\r\n```\r\n\r\n- Edit `android/app/build.gradle` and add the annoated lines as below:\r\n\r\n```gradle\r\n...\r\n\r\ndependencies {\r\n    compile fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    compile \"com.android.support:appcompat-v7:23.0.1\"\r\n    compile \"com.facebook.react:react-native:0.16.+\"\r\n    compile project(':react-native-system-notification')  // <- Add this line\r\n}\r\n```\r\n\r\n- Edit `android/app/src/main/AndroidManifest.xml` and add the annoated lines as below:\r\n\r\n```xml\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.reactnativeproject\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.GET_TASKS\" />                       <!-- <- Add this line -->\r\n    <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>           <!-- <- Add this line -->\r\n    <uses-permission android:name=\"android.permission.VIBRATE\"/>                          <!-- <- Add this line -->\r\n\r\n    <application\r\n      android:allowBackup=\"true\"\r\n      android:label=\"@string/app_name\"\r\n      android:icon=\"@mipmap/ic_launcher\"\r\n      android:theme=\"@style/AppTheme\">\r\n\r\n...\r\n\r\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\" />\r\n      <receiver android:name=\"io.neson.react.notification.NotificationEventReceiver\" />   <!-- <- Add this line -->\r\n      <receiver android:name=\"io.neson.react.notification.NotificationPublisher\" />       <!-- <- Add this line -->\r\n      <receiver android:name=\"io.neson.react.notification.SystemBootEventReceiver\">       <!-- <- Add this line -->\r\n        <intent-filter>                                                                   <!-- <- Add this line -->\r\n          <action android:name=\"android.intent.action.BOOT_COMPLETED\"></action>           <!-- <- Add this line -->\r\n        </intent-filter>                                                                  <!-- <- Add this line -->\r\n      </receiver>                                                                         <!-- <- Add this line -->\r\n    </application>\r\n\r\n</manifest>\r\n```\r\n\r\n> The `RECEIVE_BOOT_COMPLETED` permission is used to re-register all scheduled notifications after reboot.\r\n> Requesting `VIBRATE` permission is required if you want to make the device vibrate while sending notifications.\r\n\r\n- Edit `MainActivity.java` (usually at `android/app/src/main/java/com/<project-name>/MainActivity.java`) and add the annoated lines as below:\r\n\r\n```java\r\n...\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\n\r\nimport com.facebook.react.ReactActivity;\r\nimport com.facebook.react.ReactPackage;\r\nimport com.facebook.react.shell.MainReactPackage;\r\n\r\nimport io.neson.react.notification.NotificationPackage;    // <- Add this line\r\n\r\npublic class MainApplication extends Application implements ReactApplication {\r\n\r\n...\r\n\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n        return Arrays.<ReactPackage>asList(\r\n            ...\r\n            new NotificationPackage()                  // <- Add this line\r\n        );\r\n    }\r\n\r\n...\r\n```\r\n\r\n## Usage\r\n\r\n### Creating Notifications\r\n\r\nJust do:\r\n\r\n```js\r\nNotification.create({\r\n  id: 1337,\r\n  subject: 'Notification With Payload',\r\n  message: 'This is a notification that contains custom payload.',\r\n  smallIcon: 'ic_launcher',\r\n  autoClear: true,\r\n  payload: { number: 1, what: true, someAnswer: '42' }\r\n});\r\n```\r\n\r\n> All functions of this module will return [promise](https://www.promisejs.org/)s with the notification object handing in. So you can get the data of the notification and do anything that is needed, like this:\r\n>\r\n> ```js\r\n> Notification.create({ message: 'Testing.' }).then(function(notification) {\r\n>   console.log(notification);\r\n>   console.log(notification.id);\r\n> });\r\n> ```\r\n\r\nAll available options on a notification are listed below:\r\n\r\n#### Basic\r\n\r\n**id (`number`)**\r\nThe unique ID of this notification. It will be randomly chosen if not specified.\r\n\r\n**subject (`string`)**\r\nThe notification subject. Defaults to the application name on Android.\r\n\r\n**message (`string`)**\r\nThe message showen in the notification.\r\n\r\n**action (`string`)**\r\nAn action name that can be used to determine what to do when this notification is clicked. Defaults to `DEFAULT`.\r\n\r\n**payload (`object`)**\r\nA custom payload object. It can be retrieved on events of this notification. Defaults to `{}`.\r\n\r\n\r\n#### Scheduling\r\n\r\n**delay (`number`)**\r\nMilliseconds to delay before showing this notification after it is created. Useful when creating countdown alarms, reminders, etc. Note that it cannot be used with `sendAt`.\r\n\r\n**sendAt (`Date`)**\r\nSchedule this notification to show on a specified time. Note that it cannot be used with `delay`.\r\n\r\n**repeatEvery (`string` or `number`)**\r\nMust use with `sendAt`. Schedule this notification to repeat. Can be `minute`, `hour`, `halfDay`, `day`, `week`, `month`, `year` or a number of time in milliseconds.\r\n\r\n**repeatCount (`number`)**\r\nMust use with `sendAt` and `repeatEvery`. End repeating this notification after n times. Note that it cannot be used with `endAt`.\r\n\r\n**endAt (`Date`)**\r\nMust use with `sendAt` and `repeatEvery`. End repeating this notification after a specified time. Note that it cannot be used with `repeatCount`.\r\n\r\n\r\n> Some Samples of Scheduled Notifications\r\n>\r\n> ```js\r\n> Notification.create({\r\n>   subject: 'Scheduled Notification',\r\n>   message: 'This notification will show on every Friday morning at 8:30 AM, starts at 2015/9/9 and end after 10 times.',\r\n>   sendAt: new Date(2015, 9, 9, 8, 30),\r\n>   repeatEvery: 'week',\r\n>   repeatCount: 10\r\n> });\r\n> ```\r\n>\r\n> ```js\r\n> Notification.create({\r\n>   subject: 'Scheduled Notification',\r\n>   message: 'This notification will show on 2015/9/9 morning at 8:30 AM, and repeat for 10 times every minute.',\r\n>   sendAt: new Date(2015, 9, 9, 8, 30),\r\n>   repeatEvery: 60000,\r\n>   repeatCount: 10\r\n> });\r\n> ```\r\n>\r\n> ```js\r\n> Notification.create({\r\n>   subject: 'Delayed Notification',\r\n>   message: 'This notification will show after 10 seconds, even the app has been stoped.',\r\n>   delay: 10000\r\n> });\r\n> ```\r\n\r\n#### Customization\r\n\r\n**priority (`number`)**\r\nPriority of this notification, can be `-2`, `-1`, `0`, `1`, `2`. When this is set to `1` or `2`, heads-up notification will be more likely to show on Android 5+. Defaults to `1`.\r\n\r\n**smallIcon (`string`)**\r\nThe icon (file name) to show. This icon must be placed in the project's `android/app/src/main/res/mipmap-*` folder. Defaults to `ic_launcher`.\r\n\r\n**largeIcon (`string`)**\r\nNot yet implemented.\r\n\r\n**sound (`string`)**\r\nSet the sound to play. Defaults to `default` as using the default notification sound, or set this to `null` to disable the sound. Other options are not yet implemented.\r\n\r\n**vibrate (`string`)**\r\nSet the vibration pattern to use. Defaults to `default` as using the default notification vibrate, or set this to `null` to disable the vibrate. Other options are not yet implemented.\r\n\r\n**lights (`string`)**\r\nSet the desired color for the indicator LED on the device. Defaults to `default` as using the default notification lights, or set this to `null` to disable the lights. Other options are not yet implemented.\r\n\r\n**autoClear (`boolean`)**\r\nClear this notification automatically after the user clicks on it. Defaults to `true`.\r\n\r\n**onlyAlertOnce (`boolean`)**\r\nDo not let the sound, vibrate and ticker to be played if the notification is already showing.\r\n\r\n**tickerText (`string`)**\r\nSet the text to show on ticker. Defaults to `<subject>: <message>`. Set this to `null` to disable ticker.\r\n\r\n**when (`Date`)**\r\nAdd a timestamp pertaining to the notification (usually the time the event occurred).\r\n\r\n**bigText (`string`)**\r\nSet the text to be shown when the user expand the notification.\r\n\r\n**bigStyleImageBase64 (`string`)**\r\nSet the image in base64 to be shown when the user expand the notification. if bigText is not null, it have priority over bigStyleImageBase64.\r\n\r\n**bigStyleUrlImgage (`string`)**  \r\nSet URL of a image. Geting it by open a stream connection and it be shown when the user expand the notification.. if bigText is not null, it have priority over bigStyleUrlImgage\r\n\r\n**subText (`string`)**\r\nSet the third line of text in the platform notification template. Note that it cannot be used with `progress`.\r\n\r\n**progress (`number`)**\r\nSet the progress this notification represents, range: `0.0` ~ `1.0`. Set this to a number lower then zero to get an indeterminate progress. Note that it cannot be used with `subText`.\r\n\r\n**color (`string`)**\r\nColor to be applied by the standard Style templates when presenting this notification.\r\n\r\n**number (`number`)**\r\nSet a number on the notification.\r\n\r\n**private (`boolean`)**\r\nNot yet implemented.\r\n\r\n**ongoing (`boolean`)**\r\nNot yet implemented.\r\n\r\n**category (`string`)**\r\nSet the notification category, e.g.: `alarm`, `call`, `email`, `event`, `progress`, `reminder`, `social`. It may be used by the Android system for ranking and filtering.\r\n\r\n**localOnly (`boolean`)**\r\nSet whether or not this notification should not bridge to other devices.\r\n\r\n### Handle Notification Click Event\r\n\r\nRegister a listener on `sysNotificationClick` events to handle notification clicking:\r\n\r\n```js\r\nNotification.addListener('press', function(e) {\r\n  console.log(e);\r\n});\r\n```\r\n\r\nThe action and payload of the notification can be retrieved on these events:\r\n\r\n```js\r\nNotification.send({ message: 'Message', action: 'ACTION_NAME', payload: { data: 'Anything' } });\r\n```\r\n\r\n```js\r\nNotification.addListener('press', function(e) {\r\n  switch (e.action) {\r\n    case 'ACTION_NAME':\r\n      console.log(`Action Triggered! Data: ${e.payload.data}`);\r\n      break;\r\n\r\n    case 'ANOTHER_ACTION_NAME':\r\n      console.log(`Another Action Triggered! Data: ${e.payload.data}`);\r\n      break;\r\n  }\r\n});\r\n```\r\n\r\nOnce you no longer need to listen to `sysNotificationClick` events de-register the listener functions with:\r\n\r\n```js\r\nNotification.removeAllListeners('press');\r\n```\r\n\r\n### Manage Scheduled Notifications\r\n\r\nSometimes you'll need to get the scheduled notifications (which has `delay` or `sendAt` set up) that you had created before. You can use `Notification.getIDs()` to retrieve an array of IDs of available (i.e. will be send in the future) scheduled notifications.\r\n\r\n```js\r\nNotification.getIDs().then(function(ids) {\r\n  console.log(ids);  // Array of ids\r\n});\r\n```\r\n\r\nand use `Notification.find(notificationID)` to get data of an notification.\r\n\r\n```js\r\nNotification.find(notificationID).then(function(notification) {\r\n  console.log(notification);\r\n});\r\n```\r\n\r\nor just cancel it with `Notification.delete(notificationID)`:\r\n\r\n```js\r\nNotification.delete(notificationID);\r\n```\r\n\r\nWant to cancel all scheduled notifications set by your app? Sure:\r\n\r\n```js\r\nNotification.deleteAll();\r\n```\r\n\r\n> To update a scheduled notification, just use `Notification.create()` with the same id.\r\n\r\n### Clearing Notifications\r\n\r\nWhen you want to clear a notification from the system statusbar, just use:\r\n\r\n```js\r\nNotification.clearAll();\r\n```\r\n\r\nor:\r\n\r\n```js\r\nNotification.clear(notificationID);\r\n```\r\n\r\n\r\n## Push Notifications On Android\r\n\r\nSending push notification via web servers to Android is also easy! With [react-native-gcm-android](https://github.com/oney/react-native-gcm-android) intergrated, you can just pass notification arguments through GCM (with the same format as JavaScript), your app will show it directly or put it into schedule. To set this up, follow these directions:\r\n\r\n1. Run `npm install react-native-gcm-android --save` to add react-native-gcm-android to your app\r\n\r\n2. Setup GCM, follow [react-native-gcm-android](https://github.com/oney/react-native-gcm-android/tree/17b1e54)'s [README](https://github.com/oney/react-native-gcm-android/blob/17b1e54/README.md) to get GCM working.\r\n\r\n3. Open `android/app/src/main/AndroidManifest.xml`, change `com.oney.gcm.RNGcmListenerService` to `io.neson.react.notification.GCMNotificationListenerService`.\r\n\r\nThen you can send push notifications like this, putting an `notification` object (just as the same thing that you use in JavaScript Notification.create()) into the GCM `data` (curl example):\r\n\r\n```bash\r\ncurl -X POST -H \"Authorization: key=<your_google_api_key>\" -H \"Content-Type: application/json\" -d '\r\n{\r\n  \"data\": {\r\n    \"notification\": {\r\n      \"subject\": \"Hello GCM\",\r\n      \"message\": \"Hello from the server side!\"\r\n    }\r\n  },\r\n  \"to\" : \"<device_token>\"\r\n}' 'https://gcm-http.googleapis.com/gcm/send'\r\n```\r\n\r\nThe notification will be created natively (so this works even if the app is closed) when the device received the GCM message.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Neson/react-native-system-notification.git"
  },
  "version": "0.2.1"
}
